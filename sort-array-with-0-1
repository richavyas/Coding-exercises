Problem Statement : Given an array of length n, containing values of 0 and 1, provide an algorithm to efficiently sort the array in such a manner that all the 0s should be first.

Summary : This problem can be handled with different approaches with complexities like O(n^2) and O(nlogn). But as we put constraints on data, we can also achieve a smaller complexity. 

This is the solution to sort this array with the complexity O(n):

Solution :

function sortBinaryArray(intArray) {
	var length = intArray.length;
	var left = 0;
	var right = length - 1;

	function swap(arr, i, j) {
		var temp = arr[i];
		arr[i] = arr[j];
		arr[j] = temp;
	}

	while (left < right) {
		if (intArray[left] === 0) left++;
		if (intArray[right] === 1) right--;
		if (intArray[left] > intArray[right]) {
			swap(intArray, left, right);
			left++;
			right--;
		}
	}
	return (intArray);
}

var testArray = [0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
console.log(sortBinaryArray(testArray));